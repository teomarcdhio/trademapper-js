#!/usr/bin/env node
// Convert port data (some taken from https://openflights.org/data.html#airport)
// CSV file to JS; at a minimum, the CSV to process needs "ICAO Code",
// "IATA Code", "UNLOCODE" and "CountryCode" columns.
//
// This builds an object with "icao", "unlocode", "iata" properties; each of those is
// an object with the port codes as keys from the relevant vocabulary. The
// values for icao are the properties of the airport, the iata codes just
// map to the icao codes, and the values for unlocode are properties of sea ports.
//
// The output is a JS requirejs definition for the ports data
// (see trademapper/map/ports.js for example).

var fs = require('fs');
var process = require('process');
var path = require('path');

var d3 = require('../trademapper/js/lib/d3.min');


var scriptName = path.basename(process.argv[1]);

if (process.argv.length < 3) {
	console.error('Usage: ' + scriptName + ' <path to ports csv> <(optional) path to output js>');
	process.exit(1);
}

var ports = {
	icao: {},
	iata: {},
	unlocode: {},
};


var csvParser = d3.dsvFormat(',');
var inFilePath = process.argv[2];
var input = csvParser.parse(fs.readFileSync(inFilePath, 'utf8'));

var outFilePath = process.argv[3] || path.join(path.dirname(process.argv[1]), 'trademapper', 'js', 'map', 'ports.js');

var makePortData = function (port, portType) {
	return {
		lat: parseFloat(port["Latitude"]),
		lon: parseFloat(port["Longitude"]),
		name: port["Name"],
		portType: portType,
		countryCode: port["CountryCode"],
	};
};

var icaoCode, iataCode, unlocode;
for (var i = 0; i < input.length; i++) {
	var port = input[i];

	icaoCode = port["ICAO Code"].trim();
	if (icaoCode !== "") {
		ports.icao[icaoCode] = makePortData(port, "air");

		// not every ICAO code has a corresponding IATA code
		iataCode = port["IATA Code"].trim();
		if (iataCode !== "" && iataCode !== 'N/A') {
			ports.iata[iataCode] = icaoCode;
		}
	}

	unlocode = port["UNLOCODE"].trim();
	if (unlocode !== "") {
		ports.unlocode[unlocode] = makePortData(port, "sea");
	}
}

var outFile = fs.openSync(outFilePath, "a");
fs.truncateSync(outFile);
fs.writeFileSync(outFile, "// generated by " + scriptName + "\ndefine(", "utf8");
fs.writeFileSync(outFile, JSON.stringify(ports), 'utf8');
fs.writeFileSync(outFile, ');', 'utf8');
fs.closeSync(outFile);
